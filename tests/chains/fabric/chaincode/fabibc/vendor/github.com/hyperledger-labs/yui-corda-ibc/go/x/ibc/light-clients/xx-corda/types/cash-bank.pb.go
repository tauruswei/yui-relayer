// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/cash-bank.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateCashBankRequest struct {
	BankAddress string `protobuf:"bytes,1,opt,name=bank_address,json=bankAddress,proto3" json:"bank_address,omitempty"`
}

func (m *CreateCashBankRequest) Reset()         { *m = CreateCashBankRequest{} }
func (m *CreateCashBankRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCashBankRequest) ProtoMessage()    {}
func (*CreateCashBankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d87574cde4964577, []int{0}
}
func (m *CreateCashBankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCashBankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCashBankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCashBankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCashBankRequest.Merge(m, src)
}
func (m *CreateCashBankRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCashBankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCashBankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCashBankRequest proto.InternalMessageInfo

func (m *CreateCashBankRequest) GetBankAddress() string {
	if m != nil {
		return m.BankAddress
	}
	return ""
}

type AllocateCashRequest struct {
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	Currency     string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount       string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AllocateCashRequest) Reset()         { *m = AllocateCashRequest{} }
func (m *AllocateCashRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateCashRequest) ProtoMessage()    {}
func (*AllocateCashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d87574cde4964577, []int{1}
}
func (m *AllocateCashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateCashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateCashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateCashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateCashRequest.Merge(m, src)
}
func (m *AllocateCashRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllocateCashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateCashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateCashRequest proto.InternalMessageInfo

func (m *AllocateCashRequest) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *AllocateCashRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *AllocateCashRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type CashBank struct {
	Participants []*Party              `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	BaseId       *StateRef             `protobuf:"bytes,2,opt,name=baseId,proto3" json:"baseId,omitempty"`
	Owner        *Party                `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Supply       *CashBank_SupplyMap   `protobuf:"bytes,4,opt,name=supply,proto3" json:"supply,omitempty"`
	Denoms       *CashBank_IbcDenomMap `protobuf:"bytes,5,opt,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *CashBank) Reset()         { *m = CashBank{} }
func (m *CashBank) String() string { return proto.CompactTextString(m) }
func (*CashBank) ProtoMessage()    {}
func (*CashBank) Descriptor() ([]byte, []int) {
	return fileDescriptor_d87574cde4964577, []int{2}
}
func (m *CashBank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CashBank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CashBank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CashBank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CashBank.Merge(m, src)
}
func (m *CashBank) XXX_Size() int {
	return m.Size()
}
func (m *CashBank) XXX_DiscardUnknown() {
	xxx_messageInfo_CashBank.DiscardUnknown(m)
}

var xxx_messageInfo_CashBank proto.InternalMessageInfo

func (m *CashBank) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *CashBank) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *CashBank) GetOwner() *Party {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *CashBank) GetSupply() *CashBank_SupplyMap {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *CashBank) GetDenoms() *CashBank_IbcDenomMap {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type CashBank_SupplyMap struct {
	DenomToAmount map[string]string `protobuf:"bytes,1,rep,name=denomToAmount,proto3" json:"denomToAmount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CashBank_SupplyMap) Reset()         { *m = CashBank_SupplyMap{} }
func (m *CashBank_SupplyMap) String() string { return proto.CompactTextString(m) }
func (*CashBank_SupplyMap) ProtoMessage()    {}
func (*CashBank_SupplyMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d87574cde4964577, []int{2, 0}
}
func (m *CashBank_SupplyMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CashBank_SupplyMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CashBank_SupplyMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CashBank_SupplyMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CashBank_SupplyMap.Merge(m, src)
}
func (m *CashBank_SupplyMap) XXX_Size() int {
	return m.Size()
}
func (m *CashBank_SupplyMap) XXX_DiscardUnknown() {
	xxx_messageInfo_CashBank_SupplyMap.DiscardUnknown(m)
}

var xxx_messageInfo_CashBank_SupplyMap proto.InternalMessageInfo

func (m *CashBank_SupplyMap) GetDenomToAmount() map[string]string {
	if m != nil {
		return m.DenomToAmount
	}
	return nil
}

type CashBank_IbcDenomMap struct {
	IbcDenomToDenom map[string]string `protobuf:"bytes,1,rep,name=ibcDenomToDenom,proto3" json:"ibcDenomToDenom,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CashBank_IbcDenomMap) Reset()         { *m = CashBank_IbcDenomMap{} }
func (m *CashBank_IbcDenomMap) String() string { return proto.CompactTextString(m) }
func (*CashBank_IbcDenomMap) ProtoMessage()    {}
func (*CashBank_IbcDenomMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d87574cde4964577, []int{2, 1}
}
func (m *CashBank_IbcDenomMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CashBank_IbcDenomMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CashBank_IbcDenomMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CashBank_IbcDenomMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CashBank_IbcDenomMap.Merge(m, src)
}
func (m *CashBank_IbcDenomMap) XXX_Size() int {
	return m.Size()
}
func (m *CashBank_IbcDenomMap) XXX_DiscardUnknown() {
	xxx_messageInfo_CashBank_IbcDenomMap.DiscardUnknown(m)
}

var xxx_messageInfo_CashBank_IbcDenomMap proto.InternalMessageInfo

func (m *CashBank_IbcDenomMap) GetIbcDenomToDenom() map[string]string {
	if m != nil {
		return m.IbcDenomToDenom
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateCashBankRequest)(nil), "ibc.lightclients.corda.v1.CreateCashBankRequest")
	proto.RegisterType((*AllocateCashRequest)(nil), "ibc.lightclients.corda.v1.AllocateCashRequest")
	proto.RegisterType((*CashBank)(nil), "ibc.lightclients.corda.v1.CashBank")
	proto.RegisterType((*CashBank_SupplyMap)(nil), "ibc.lightclients.corda.v1.CashBank.SupplyMap")
	proto.RegisterMapType((map[string]string)(nil), "ibc.lightclients.corda.v1.CashBank.SupplyMap.DenomToAmountEntry")
	proto.RegisterType((*CashBank_IbcDenomMap)(nil), "ibc.lightclients.corda.v1.CashBank.IbcDenomMap")
	proto.RegisterMapType((map[string]string)(nil), "ibc.lightclients.corda.v1.CashBank.IbcDenomMap.IbcDenomToDenomEntry")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/cash-bank.proto", fileDescriptor_d87574cde4964577)
}

var fileDescriptor_d87574cde4964577 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x4f, 0xd4, 0x40,
	0x14, 0xa6, 0xe0, 0x6e, 0xe0, 0xed, 0xae, 0x98, 0x11, 0xc9, 0x5a, 0x93, 0x0d, 0xc2, 0x05, 0x63,
	0x3a, 0x23, 0x98, 0x18, 0x83, 0x17, 0x58, 0x96, 0x18, 0x12, 0x8d, 0x58, 0x88, 0x07, 0x2e, 0x66,
	0x3a, 0x1d, 0xba, 0x0d, 0xdd, 0x4e, 0x9d, 0x4e, 0xd7, 0xed, 0xbf, 0x30, 0xf1, 0xb7, 0xf8, 0x03,
	0xbc, 0x79, 0xc4, 0x9b, 0x47, 0x03, 0x7f, 0xc4, 0x74, 0xa6, 0xdd, 0x2c, 0x08, 0x1b, 0x38, 0x75,
	0xde, 0x9b, 0xef, 0xfb, 0xfa, 0xbd, 0x99, 0x79, 0x0f, 0x9e, 0x85, 0x1e, 0x23, 0x51, 0x18, 0xf4,
	0x15, 0x8b, 0x42, 0x1e, 0xab, 0x94, 0x30, 0x21, 0x7d, 0x4a, 0x86, 0x1b, 0x84, 0xd1, 0xb4, 0xef,
	0x78, 0x34, 0x3e, 0xc5, 0x89, 0x14, 0x4a, 0xa0, 0xc7, 0xa1, 0xc7, 0xf0, 0x24, 0x14, 0x6b, 0x28,
	0x1e, 0x6e, 0xd8, 0xcf, 0xa7, 0xa8, 0x14, 0x0b, 0x47, 0xe5, 0x09, 0x4f, 0x8d, 0x8e, 0xfd, 0x24,
	0x10, 0x22, 0x88, 0x38, 0xd1, 0x91, 0x97, 0x9d, 0x10, 0x3e, 0x48, 0x54, 0x6e, 0x36, 0x57, 0xb7,
	0xe0, 0xd1, 0xae, 0xe4, 0x54, 0xf1, 0x5d, 0x9a, 0xf6, 0xbb, 0x34, 0x3e, 0x75, 0xf9, 0x97, 0x8c,
	0xa7, 0x0a, 0x3d, 0x85, 0x66, 0xe1, 0xe5, 0x33, 0xf5, 0x7d, 0xc9, 0xd3, 0xb4, 0x6d, 0xad, 0x58,
	0xeb, 0x0b, 0x6e, 0xa3, 0xc8, 0xed, 0x98, 0xd4, 0x6a, 0x0c, 0x0f, 0x77, 0xa2, 0x48, 0xb0, 0x92,
	0x5d, 0x31, 0xd7, 0xa0, 0x25, 0xbe, 0xc6, 0x5c, 0x5e, 0xa1, 0x36, 0x75, 0xb2, 0xe4, 0x22, 0x1b,
	0xe6, 0x59, 0x26, 0x25, 0x8f, 0x59, 0xde, 0x9e, 0xd5, 0xfb, 0xe3, 0x18, 0x2d, 0x43, 0x9d, 0x0e,
	0x44, 0x16, 0xab, 0xf6, 0x9c, 0xde, 0x29, 0xa3, 0xd5, 0xdf, 0x35, 0x98, 0xaf, 0x6c, 0xa2, 0x1e,
	0x34, 0x13, 0x2a, 0x55, 0xc8, 0xc2, 0x84, 0xc6, 0xaa, 0xf8, 0xc9, 0xdc, 0x7a, 0x63, 0x73, 0x05,
	0xdf, 0x78, 0x68, 0xf8, 0x80, 0x4a, 0x95, 0xbb, 0x97, 0x58, 0xe8, 0x0d, 0xd4, 0x3d, 0x9a, 0xf2,
	0x7d, 0x5f, 0x9b, 0x68, 0x6c, 0xae, 0x4d, 0xe1, 0x1f, 0x2a, 0xaa, 0xb8, 0xcb, 0x4f, 0xdc, 0x92,
	0x82, 0x5e, 0x41, 0x4d, 0xd7, 0xa4, 0x6d, 0xde, 0xe6, 0xdf, 0x06, 0x8e, 0xf6, 0xa0, 0x9e, 0x66,
	0x49, 0x12, 0xe5, 0xed, 0x7b, 0x9a, 0xe8, 0x4c, 0x21, 0x56, 0xf5, 0xe2, 0x43, 0xcd, 0x78, 0x4f,
	0x13, 0xb7, 0x24, 0xa3, 0xb7, 0x50, 0xf7, 0x79, 0x2c, 0x06, 0x69, 0xbb, 0xa6, 0x65, 0xc8, 0x6d,
	0x64, 0xf6, 0x3d, 0xd6, 0x2b, 0x48, 0x5a, 0xc8, 0xd0, 0xed, 0x1f, 0x16, 0x2c, 0x8c, 0xe5, 0xd1,
	0x09, 0xb4, 0x74, 0xfe, 0x48, 0xec, 0x98, 0x4b, 0x30, 0x27, 0xbb, 0x7d, 0x27, 0x93, 0xb8, 0x37,
	0x29, 0xb1, 0x17, 0x2b, 0x99, 0xbb, 0x97, 0x65, 0xed, 0x6d, 0x40, 0xff, 0x83, 0xd0, 0x03, 0x98,
	0x3b, 0xe5, 0x79, 0xf9, 0x64, 0x8a, 0x25, 0x5a, 0x82, 0xda, 0x90, 0x46, 0x19, 0x2f, 0x9f, 0x89,
	0x09, 0xb6, 0x66, 0x5f, 0x5b, 0xf6, 0x4f, 0x0b, 0x1a, 0x13, 0xf5, 0xa0, 0x18, 0x16, 0xc3, 0x32,
	0x3c, 0x12, 0xfa, 0x53, 0x7a, 0xef, 0xdd, 0xf1, 0x64, 0xc6, 0xeb, 0x52, 0xc6, 0xf8, 0xbf, 0x2a,
	0x6e, 0x77, 0x61, 0xe9, 0x3a, 0xe0, 0x5d, 0x6a, 0xd8, 0xfc, 0x3e, 0x0b, 0x8b, 0x95, 0x85, 0x43,
	0x2e, 0x87, 0x21, 0xe3, 0xe8, 0x18, 0xee, 0x5f, 0xee, 0x49, 0xf4, 0x62, 0x5a, 0x01, 0xd7, 0xb5,
	0xaf, 0xbd, 0x8c, 0x4d, 0xd7, 0xe3, 0xaa, 0xeb, 0xf1, 0x5e, 0xd1, 0xf5, 0xe8, 0x13, 0x34, 0x27,
	0x7b, 0x16, 0xe1, 0x29, 0xca, 0xd7, 0x34, 0xf7, 0x8d, 0xba, 0xef, 0xa0, 0xf5, 0x31, 0xe3, 0x32,
	0x1f, 0x5b, 0xbe, 0x01, 0x68, 0xaf, 0xdd, 0xe2, 0x2e, 0xba, 0xa3, 0x5f, 0xe7, 0x1d, 0xeb, 0xec,
	0xbc, 0x63, 0xfd, 0x3d, 0xef, 0x58, 0xdf, 0x2e, 0x3a, 0x33, 0x67, 0x17, 0x9d, 0x99, 0x3f, 0x17,
	0x9d, 0x99, 0x6e, 0xab, 0xc2, 0x1c, 0x14, 0xb2, 0xc7, 0x1f, 0x82, 0x50, 0xf5, 0x33, 0x0f, 0x33,
	0x31, 0x20, 0xfd, 0x3c, 0xe1, 0x32, 0xe2, 0x7e, 0xc0, 0xa5, 0x13, 0x51, 0x2f, 0x25, 0x79, 0x16,
	0x3a, 0x66, 0x1c, 0x16, 0xe3, 0x32, 0x10, 0x64, 0x44, 0xc6, 0x73, 0xd3, 0xa9, 0x06, 0xe7, 0x68,
	0x64, 0x30, 0x44, 0x8f, 0x4c, 0xaf, 0xae, 0xed, 0xbe, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xbb,
	0x93, 0x68, 0x6c, 0xa8, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CashBankServiceClient is the client API for CashBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CashBankServiceClient interface {
	// transactions
	CreateCashBank(ctx context.Context, in *CreateCashBankRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllocateCash(ctx context.Context, in *AllocateCashRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// queries
	QueryCashBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CashBank, error)
}

type cashBankServiceClient struct {
	cc grpc1.ClientConn
}

func NewCashBankServiceClient(cc grpc1.ClientConn) CashBankServiceClient {
	return &cashBankServiceClient{cc}
}

func (c *cashBankServiceClient) CreateCashBank(ctx context.Context, in *CreateCashBankRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.CashBankService/CreateCashBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBankServiceClient) AllocateCash(ctx context.Context, in *AllocateCashRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.CashBankService/AllocateCash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBankServiceClient) QueryCashBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CashBank, error) {
	out := new(CashBank)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.CashBankService/QueryCashBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CashBankServiceServer is the server API for CashBankService service.
type CashBankServiceServer interface {
	// transactions
	CreateCashBank(context.Context, *CreateCashBankRequest) (*emptypb.Empty, error)
	AllocateCash(context.Context, *AllocateCashRequest) (*emptypb.Empty, error)
	// queries
	QueryCashBank(context.Context, *emptypb.Empty) (*CashBank, error)
}

// UnimplementedCashBankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCashBankServiceServer struct {
}

func (*UnimplementedCashBankServiceServer) CreateCashBank(ctx context.Context, req *CreateCashBankRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCashBank not implemented")
}
func (*UnimplementedCashBankServiceServer) AllocateCash(ctx context.Context, req *AllocateCashRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateCash not implemented")
}
func (*UnimplementedCashBankServiceServer) QueryCashBank(ctx context.Context, req *emptypb.Empty) (*CashBank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCashBank not implemented")
}

func RegisterCashBankServiceServer(s grpc1.Server, srv CashBankServiceServer) {
	s.RegisterService(&_CashBankService_serviceDesc, srv)
}

func _CashBankService_CreateCashBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCashBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBankServiceServer).CreateCashBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.CashBankService/CreateCashBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBankServiceServer).CreateCashBank(ctx, req.(*CreateCashBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBankService_AllocateCash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateCashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBankServiceServer).AllocateCash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.CashBankService/AllocateCash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBankServiceServer).AllocateCash(ctx, req.(*AllocateCashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBankService_QueryCashBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBankServiceServer).QueryCashBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.CashBankService/QueryCashBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBankServiceServer).QueryCashBank(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CashBankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.CashBankService",
	HandlerType: (*CashBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCashBank",
			Handler:    _CashBankService_CreateCashBank_Handler,
		},
		{
			MethodName: "AllocateCash",
			Handler:    _CashBankService_AllocateCash_Handler,
		},
		{
			MethodName: "QueryCashBank",
			Handler:    _CashBankService_QueryCashBank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/cash-bank.proto",
}

func (m *CreateCashBankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCashBankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCashBankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BankAddress) > 0 {
		i -= len(m.BankAddress)
		copy(dAtA[i:], m.BankAddress)
		i = encodeVarintCashBank(dAtA, i, uint64(len(m.BankAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllocateCashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateCashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateCashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintCashBank(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintCashBank(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintCashBank(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CashBank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CashBank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CashBank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denoms != nil {
		{
			size, err := m.Denoms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCashBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Supply != nil {
		{
			size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCashBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCashBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCashBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCashBank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CashBank_SupplyMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CashBank_SupplyMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CashBank_SupplyMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomToAmount) > 0 {
		for k := range m.DenomToAmount {
			v := m.DenomToAmount[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCashBank(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCashBank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCashBank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CashBank_IbcDenomMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CashBank_IbcDenomMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CashBank_IbcDenomMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcDenomToDenom) > 0 {
		for k := range m.IbcDenomToDenom {
			v := m.IbcDenomToDenom[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCashBank(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCashBank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCashBank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCashBank(dAtA []byte, offset int, v uint64) int {
	offset -= sovCashBank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateCashBankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BankAddress)
	if l > 0 {
		n += 1 + l + sovCashBank(uint64(l))
	}
	return n
}

func (m *AllocateCashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovCashBank(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovCashBank(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovCashBank(uint64(l))
	}
	return n
}

func (m *CashBank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovCashBank(uint64(l))
		}
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovCashBank(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovCashBank(uint64(l))
	}
	if m.Supply != nil {
		l = m.Supply.Size()
		n += 1 + l + sovCashBank(uint64(l))
	}
	if m.Denoms != nil {
		l = m.Denoms.Size()
		n += 1 + l + sovCashBank(uint64(l))
	}
	return n
}

func (m *CashBank_SupplyMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomToAmount) > 0 {
		for k, v := range m.DenomToAmount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCashBank(uint64(len(k))) + 1 + len(v) + sovCashBank(uint64(len(v)))
			n += mapEntrySize + 1 + sovCashBank(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CashBank_IbcDenomMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IbcDenomToDenom) > 0 {
		for k, v := range m.IbcDenomToDenom {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCashBank(uint64(len(k))) + 1 + len(v) + sovCashBank(uint64(len(v)))
			n += mapEntrySize + 1 + sovCashBank(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCashBank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCashBank(x uint64) (n int) {
	return sovCashBank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateCashBankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCashBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCashBankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCashBankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCashBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateCashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCashBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateCashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateCashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCashBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CashBank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCashBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CashBank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CashBank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Party{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supply == nil {
				m.Supply = &CashBank_SupplyMap{}
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Denoms == nil {
				m.Denoms = &CashBank_IbcDenomMap{}
			}
			if err := m.Denoms.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCashBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CashBank_SupplyMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCashBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomToAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomToAmount == nil {
				m.DenomToAmount = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCashBank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCashBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCashBank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCashBank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCashBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCashBank
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCashBank
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCashBank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCashBank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DenomToAmount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCashBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CashBank_IbcDenomMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCashBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcDenomMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcDenomMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenomToDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCashBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCashBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcDenomToDenom == nil {
				m.IbcDenomToDenom = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCashBank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCashBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCashBank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCashBank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCashBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCashBank
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCashBank
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCashBank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCashBank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IbcDenomToDenom[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCashBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCashBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCashBank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCashBank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCashBank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCashBank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCashBank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCashBank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCashBank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCashBank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCashBank = fmt.Errorf("proto: unexpected end of group")
)
