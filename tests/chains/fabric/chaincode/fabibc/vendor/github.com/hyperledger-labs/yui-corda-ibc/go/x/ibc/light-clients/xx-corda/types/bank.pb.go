// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/bank.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AllocateFundRequest struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AllocateFundRequest) Reset()         { *m = AllocateFundRequest{} }
func (m *AllocateFundRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateFundRequest) ProtoMessage()    {}
func (*AllocateFundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b90edb5a135071e, []int{0}
}
func (m *AllocateFundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateFundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateFundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateFundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateFundRequest.Merge(m, src)
}
func (m *AllocateFundRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllocateFundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateFundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateFundRequest proto.InternalMessageInfo

func (m *AllocateFundRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AllocateFundRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AllocateFundRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type Bank struct {
	Participants []*Party          `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	BaseId       *StateRef         `protobuf:"bytes,2,opt,name=baseId,proto3" json:"baseId,omitempty"`
	Allocated    *Bank_BalanceMap  `protobuf:"bytes,3,opt,name=allocated,proto3" json:"allocated,omitempty"`
	Locked       *Bank_BalanceMap  `protobuf:"bytes,4,opt,name=locked,proto3" json:"locked,omitempty"`
	Minted       *Bank_BalanceMap  `protobuf:"bytes,5,opt,name=minted,proto3" json:"minted,omitempty"`
	Denoms       *Bank_IbcDenomMap `protobuf:"bytes,6,opt,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *Bank) Reset()         { *m = Bank{} }
func (m *Bank) String() string { return proto.CompactTextString(m) }
func (*Bank) ProtoMessage()    {}
func (*Bank) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b90edb5a135071e, []int{1}
}
func (m *Bank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank.Merge(m, src)
}
func (m *Bank) XXX_Size() int {
	return m.Size()
}
func (m *Bank) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank.DiscardUnknown(m)
}

var xxx_messageInfo_Bank proto.InternalMessageInfo

func (m *Bank) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Bank) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *Bank) GetAllocated() *Bank_BalanceMap {
	if m != nil {
		return m.Allocated
	}
	return nil
}

func (m *Bank) GetLocked() *Bank_BalanceMap {
	if m != nil {
		return m.Locked
	}
	return nil
}

func (m *Bank) GetMinted() *Bank_BalanceMap {
	if m != nil {
		return m.Minted
	}
	return nil
}

func (m *Bank) GetDenoms() *Bank_IbcDenomMap {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type Bank_BalanceMapPerDenom struct {
	PubkeyToAmount map[string]string `protobuf:"bytes,1,rep,name=pubkeyToAmount,proto3" json:"pubkeyToAmount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bank_BalanceMapPerDenom) Reset()         { *m = Bank_BalanceMapPerDenom{} }
func (m *Bank_BalanceMapPerDenom) String() string { return proto.CompactTextString(m) }
func (*Bank_BalanceMapPerDenom) ProtoMessage()    {}
func (*Bank_BalanceMapPerDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b90edb5a135071e, []int{1, 0}
}
func (m *Bank_BalanceMapPerDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank_BalanceMapPerDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank_BalanceMapPerDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank_BalanceMapPerDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank_BalanceMapPerDenom.Merge(m, src)
}
func (m *Bank_BalanceMapPerDenom) XXX_Size() int {
	return m.Size()
}
func (m *Bank_BalanceMapPerDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank_BalanceMapPerDenom.DiscardUnknown(m)
}

var xxx_messageInfo_Bank_BalanceMapPerDenom proto.InternalMessageInfo

func (m *Bank_BalanceMapPerDenom) GetPubkeyToAmount() map[string]string {
	if m != nil {
		return m.PubkeyToAmount
	}
	return nil
}

type Bank_BalanceMap struct {
	DenomToMap map[string]*Bank_BalanceMapPerDenom `protobuf:"bytes,1,rep,name=denomToMap,proto3" json:"denomToMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bank_BalanceMap) Reset()         { *m = Bank_BalanceMap{} }
func (m *Bank_BalanceMap) String() string { return proto.CompactTextString(m) }
func (*Bank_BalanceMap) ProtoMessage()    {}
func (*Bank_BalanceMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b90edb5a135071e, []int{1, 1}
}
func (m *Bank_BalanceMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank_BalanceMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank_BalanceMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank_BalanceMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank_BalanceMap.Merge(m, src)
}
func (m *Bank_BalanceMap) XXX_Size() int {
	return m.Size()
}
func (m *Bank_BalanceMap) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank_BalanceMap.DiscardUnknown(m)
}

var xxx_messageInfo_Bank_BalanceMap proto.InternalMessageInfo

func (m *Bank_BalanceMap) GetDenomToMap() map[string]*Bank_BalanceMapPerDenom {
	if m != nil {
		return m.DenomToMap
	}
	return nil
}

type Bank_IbcDenomMap struct {
	IbcDenomToDenom map[string]string `protobuf:"bytes,1,rep,name=ibcDenomToDenom,proto3" json:"ibcDenomToDenom,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bank_IbcDenomMap) Reset()         { *m = Bank_IbcDenomMap{} }
func (m *Bank_IbcDenomMap) String() string { return proto.CompactTextString(m) }
func (*Bank_IbcDenomMap) ProtoMessage()    {}
func (*Bank_IbcDenomMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b90edb5a135071e, []int{1, 2}
}
func (m *Bank_IbcDenomMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank_IbcDenomMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank_IbcDenomMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank_IbcDenomMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank_IbcDenomMap.Merge(m, src)
}
func (m *Bank_IbcDenomMap) XXX_Size() int {
	return m.Size()
}
func (m *Bank_IbcDenomMap) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank_IbcDenomMap.DiscardUnknown(m)
}

var xxx_messageInfo_Bank_IbcDenomMap proto.InternalMessageInfo

func (m *Bank_IbcDenomMap) GetIbcDenomToDenom() map[string]string {
	if m != nil {
		return m.IbcDenomToDenom
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocateFundRequest)(nil), "ibc.lightclients.corda.v1.AllocateFundRequest")
	proto.RegisterType((*Bank)(nil), "ibc.lightclients.corda.v1.Bank")
	proto.RegisterType((*Bank_BalanceMapPerDenom)(nil), "ibc.lightclients.corda.v1.Bank.BalanceMapPerDenom")
	proto.RegisterMapType((map[string]string)(nil), "ibc.lightclients.corda.v1.Bank.BalanceMapPerDenom.PubkeyToAmountEntry")
	proto.RegisterType((*Bank_BalanceMap)(nil), "ibc.lightclients.corda.v1.Bank.BalanceMap")
	proto.RegisterMapType((map[string]*Bank_BalanceMapPerDenom)(nil), "ibc.lightclients.corda.v1.Bank.BalanceMap.DenomToMapEntry")
	proto.RegisterType((*Bank_IbcDenomMap)(nil), "ibc.lightclients.corda.v1.Bank.IbcDenomMap")
	proto.RegisterMapType((map[string]string)(nil), "ibc.lightclients.corda.v1.Bank.IbcDenomMap.IbcDenomToDenomEntry")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/bank.proto", fileDescriptor_5b90edb5a135071e)
}

var fileDescriptor_5b90edb5a135071e = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0xdb, 0x40,
	0x10, 0xc5, 0x7c, 0x44, 0xcd, 0x04, 0x95, 0x6a, 0x41, 0x28, 0x75, 0xa5, 0x14, 0xd1, 0x1e, 0x50,
	0x51, 0xd6, 0x22, 0xbd, 0x54, 0xb4, 0x87, 0x12, 0x02, 0x82, 0x03, 0x6a, 0x6a, 0x50, 0xa5, 0x72,
	0x5b, 0xdb, 0x43, 0x70, 0xe3, 0x78, 0x8d, 0xbd, 0x4e, 0xf1, 0x3f, 0xe8, 0xb1, 0x7f, 0xa8, 0xe7,
	0xf6, 0xc8, 0xb1, 0x52, 0x2f, 0x15, 0x9c, 0xfa, 0x2f, 0xaa, 0xdd, 0x75, 0xc0, 0xa0, 0x24, 0x90,
	0x93, 0x3d, 0xb3, 0xf3, 0xde, 0xbe, 0xd9, 0x19, 0x3d, 0x78, 0xe9, 0x3b, 0xae, 0x15, 0xf8, 0x9d,
	0x53, 0xe1, 0x06, 0x3e, 0x86, 0x22, 0xb1, 0x5c, 0x1e, 0x7b, 0xcc, 0xea, 0x6f, 0x58, 0x0e, 0x0b,
	0xbb, 0x34, 0x8a, 0xb9, 0xe0, 0xe4, 0xa9, 0xef, 0xb8, 0xb4, 0x58, 0x45, 0x55, 0x15, 0xed, 0x6f,
	0x98, 0xeb, 0xa3, 0x09, 0xd4, 0x4f, 0x5d, 0x64, 0x11, 0x26, 0x9a, 0xc7, 0x7c, 0xd6, 0xe1, 0xbc,
	0x13, 0xa0, 0xa5, 0x22, 0x27, 0x3d, 0xb1, 0xb0, 0x17, 0x89, 0x4c, 0x1f, 0xae, 0x7e, 0x86, 0xc5,
	0xad, 0x20, 0xe0, 0x2e, 0x13, 0xb8, 0x9b, 0x86, 0x9e, 0x8d, 0x67, 0x29, 0x26, 0x82, 0x2c, 0xc1,
	0x1c, 0xff, 0x1a, 0x62, 0x5c, 0x35, 0x56, 0x8c, 0xb5, 0xb2, 0xad, 0x03, 0x99, 0xf5, 0x30, 0xe4,
	0xbd, 0xea, 0xb4, 0xce, 0xaa, 0x80, 0x2c, 0x43, 0x89, 0xf5, 0x78, 0x1a, 0x8a, 0xea, 0x8c, 0x4a,
	0xe7, 0xd1, 0xea, 0xb7, 0x47, 0x30, 0xdb, 0x64, 0x61, 0x97, 0xb4, 0x60, 0x3e, 0x62, 0xb1, 0xf0,
	0x5d, 0x3f, 0x62, 0xa1, 0x48, 0xaa, 0xc6, 0xca, 0xcc, 0x5a, 0xa5, 0xb1, 0x42, 0x47, 0xf6, 0x47,
	0xdb, 0x2c, 0x16, 0x99, 0x7d, 0x0b, 0x45, 0xde, 0x42, 0xc9, 0x61, 0x09, 0xee, 0x7b, 0xea, 0xf6,
	0x4a, 0xe3, 0xc5, 0x18, 0xfc, 0xa1, 0x60, 0x02, 0x6d, 0x3c, 0xb1, 0x73, 0x08, 0xd9, 0x83, 0x32,
	0xcb, 0xdb, 0xf4, 0x94, 0xcc, 0x4a, 0xe3, 0xd5, 0x18, 0xbc, 0x94, 0x4d, 0x9b, 0x2c, 0x60, 0xa1,
	0x8b, 0x07, 0x2c, 0xb2, 0x6f, 0xc0, 0xa4, 0x09, 0xa5, 0x80, 0xbb, 0x5d, 0xf4, 0xaa, 0xb3, 0x13,
	0xd3, 0xe4, 0x48, 0xc9, 0xd1, 0xf3, 0x43, 0x29, 0x65, 0x6e, 0x72, 0x0e, 0x8d, 0x24, 0xdb, 0x50,
	0x52, 0xcf, 0x9f, 0x54, 0x4b, 0x8a, 0x63, 0xfd, 0x3e, 0x8e, 0x7d, 0xc7, 0x6d, 0x49, 0x80, 0x22,
	0xd1, 0x50, 0xf3, 0xa7, 0x01, 0xe4, 0x86, 0xbb, 0x8d, 0xb1, 0xaa, 0x20, 0x21, 0x3c, 0x8e, 0x52,
	0xa7, 0x8b, 0xd9, 0x11, 0xdf, 0xd2, 0x93, 0xd5, 0x23, 0xdb, 0x7d, 0xb8, 0xce, 0x01, 0x17, 0x6d,
	0xdf, 0x22, 0xda, 0x09, 0x45, 0x9c, 0xd9, 0x77, 0xd8, 0xcd, 0x2d, 0x58, 0x1c, 0x52, 0x46, 0x9e,
	0xc0, 0x4c, 0x17, 0xb3, 0x7c, 0x05, 0xe5, 0xaf, 0x5c, 0xc0, 0x3e, 0x0b, 0x52, 0x1c, 0x2c, 0xa0,
	0x0a, 0x36, 0xa7, 0xdf, 0x18, 0xe6, 0x1f, 0x03, 0xe0, 0xe6, 0x76, 0x72, 0x0c, 0xa0, 0x5a, 0x3c,
	0xe2, 0x07, 0x2c, 0xca, 0xd5, 0x6f, 0x3e, 0x5c, 0x3d, 0x6d, 0x5d, 0x83, 0xb5, 0xe2, 0x02, 0x9b,
	0x79, 0x06, 0x0b, 0x77, 0x8e, 0x87, 0x28, 0xdd, 0x2b, 0x2a, 0xad, 0x34, 0x1a, 0x93, 0xbf, 0x5c,
	0xb1, 0xbb, 0x1f, 0x06, 0x54, 0x0a, 0xf3, 0x23, 0x5f, 0x60, 0xc1, 0xcf, 0xc3, 0x23, 0xae, 0x3e,
	0x79, 0x8f, 0xef, 0x27, 0xd8, 0x82, 0xeb, 0xff, 0x9c, 0x42, 0x77, 0x7a, 0x97, 0xd8, 0x6c, 0xc2,
	0xd2, 0xb0, 0xc2, 0x49, 0xa6, 0xd3, 0xf8, 0x67, 0x40, 0x45, 0x5e, 0x7f, 0x88, 0x71, 0xdf, 0x77,
	0x91, 0xbc, 0x03, 0xd8, 0x8e, 0x91, 0x09, 0x54, 0xfe, 0xb0, 0x4c, 0xb5, 0x43, 0xd1, 0x81, 0x43,
	0xd1, 0x1d, 0xe9, 0x50, 0xe6, 0x88, 0x3c, 0xf9, 0x04, 0xf3, 0x45, 0xcf, 0x22, 0x74, 0x4c, 0xd3,
	0x43, 0xcc, 0x6d, 0x24, 0x6f, 0x0b, 0xca, 0x1f, 0x53, 0x8c, 0xb3, 0xb1, 0xa2, 0x9e, 0xdf, 0xf3,
	0xc2, 0x4d, 0xf1, 0xeb, 0xb2, 0x66, 0x5c, 0x5c, 0xd6, 0x8c, 0xbf, 0x97, 0x35, 0xe3, 0xfb, 0x55,
	0x6d, 0xea, 0xe2, 0xaa, 0x36, 0xf5, 0xfb, 0xaa, 0x36, 0xd5, 0x2c, 0xcb, 0xf3, 0xb6, 0xa4, 0x3b,
	0xfe, 0xd0, 0xf1, 0xc5, 0x69, 0xea, 0x50, 0x97, 0xf7, 0xac, 0xd3, 0x2c, 0xc2, 0x38, 0x40, 0xaf,
	0x83, 0x71, 0x3d, 0x60, 0x4e, 0x62, 0x65, 0xa9, 0x5f, 0xd7, 0x36, 0x2e, 0x6d, 0xbe, 0xc3, 0xad,
	0x73, 0xeb, 0xda, 0xef, 0xeb, 0x03, 0xc3, 0x3f, 0x3f, 0xd7, 0x35, 0x96, 0xb2, 0x7a, 0xa7, 0xa4,
	0x64, 0xbe, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x5a, 0xb4, 0xed, 0x5b, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BankServiceClient interface {
	// transactions
	CreateBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllocateFund(ctx context.Context, in *AllocateFundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// queries
	QueryBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Bank, error)
}

type bankServiceClient struct {
	cc grpc1.ClientConn
}

func NewBankServiceClient(cc grpc1.ClientConn) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) CreateBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.BankService/CreateBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) AllocateFund(ctx context.Context, in *AllocateFundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.BankService/AllocateFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) QueryBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Bank, error) {
	out := new(Bank)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.BankService/QueryBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
type BankServiceServer interface {
	// transactions
	CreateBank(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	AllocateFund(context.Context, *AllocateFundRequest) (*emptypb.Empty, error)
	// queries
	QueryBank(context.Context, *emptypb.Empty) (*Bank, error)
}

// UnimplementedBankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (*UnimplementedBankServiceServer) CreateBank(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBank not implemented")
}
func (*UnimplementedBankServiceServer) AllocateFund(ctx context.Context, req *AllocateFundRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateFund not implemented")
}
func (*UnimplementedBankServiceServer) QueryBank(ctx context.Context, req *emptypb.Empty) (*Bank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBank not implemented")
}

func RegisterBankServiceServer(s grpc1.Server, srv BankServiceServer) {
	s.RegisterService(&_BankService_serviceDesc, srv)
}

func _BankService_CreateBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).CreateBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.BankService/CreateBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).CreateBank(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_AllocateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).AllocateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.BankService/AllocateFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).AllocateFund(ctx, req.(*AllocateFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_QueryBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).QueryBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.BankService/QueryBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).QueryBank(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBank",
			Handler:    _BankService_CreateBank_Handler,
		},
		{
			MethodName: "AllocateFund",
			Handler:    _BankService_AllocateFund_Handler,
		},
		{
			MethodName: "QueryBank",
			Handler:    _BankService_QueryBank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/bank.proto",
}

func (m *AllocateFundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateFundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateFundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBank(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintBank(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBank(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denoms != nil {
		{
			size, err := m.Denoms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Minted != nil {
		{
			size, err := m.Minted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Locked != nil {
		{
			size, err := m.Locked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Allocated != nil {
		{
			size, err := m.Allocated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bank_BalanceMapPerDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank_BalanceMapPerDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank_BalanceMapPerDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubkeyToAmount) > 0 {
		for k := range m.PubkeyToAmount {
			v := m.PubkeyToAmount[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBank(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bank_BalanceMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank_BalanceMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank_BalanceMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomToMap) > 0 {
		for k := range m.DenomToMap {
			v := m.DenomToMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBank(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bank_IbcDenomMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank_IbcDenomMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank_IbcDenomMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcDenomToDenom) > 0 {
		for k := range m.IbcDenomToDenom {
			v := m.IbcDenomToDenom[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBank(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBank(dAtA []byte, offset int, v uint64) int {
	offset -= sovBank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocateFundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBank(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovBank(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBank(uint64(l))
	}
	return n
}

func (m *Bank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovBank(uint64(l))
		}
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovBank(uint64(l))
	}
	if m.Allocated != nil {
		l = m.Allocated.Size()
		n += 1 + l + sovBank(uint64(l))
	}
	if m.Locked != nil {
		l = m.Locked.Size()
		n += 1 + l + sovBank(uint64(l))
	}
	if m.Minted != nil {
		l = m.Minted.Size()
		n += 1 + l + sovBank(uint64(l))
	}
	if m.Denoms != nil {
		l = m.Denoms.Size()
		n += 1 + l + sovBank(uint64(l))
	}
	return n
}

func (m *Bank_BalanceMapPerDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PubkeyToAmount) > 0 {
		for k, v := range m.PubkeyToAmount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBank(uint64(len(k))) + 1 + len(v) + sovBank(uint64(len(v)))
			n += mapEntrySize + 1 + sovBank(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bank_BalanceMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomToMap) > 0 {
		for k, v := range m.DenomToMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBank(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBank(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBank(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bank_IbcDenomMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IbcDenomToDenom) > 0 {
		for k, v := range m.IbcDenomToDenom {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBank(uint64(len(k))) + 1 + len(v) + sovBank(uint64(len(v)))
			n += mapEntrySize + 1 + sovBank(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBank(x uint64) (n int) {
	return sovBank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocateFundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateFundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateFundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allocated == nil {
				m.Allocated = &Bank_BalanceMap{}
			}
			if err := m.Allocated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locked == nil {
				m.Locked = &Bank_BalanceMap{}
			}
			if err := m.Locked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minted == nil {
				m.Minted = &Bank_BalanceMap{}
			}
			if err := m.Minted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Denoms == nil {
				m.Denoms = &Bank_IbcDenomMap{}
			}
			if err := m.Denoms.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank_BalanceMapPerDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceMapPerDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceMapPerDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyToAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyToAmount == nil {
				m.PubkeyToAmount = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBank
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBank
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PubkeyToAmount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank_BalanceMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomToMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomToMap == nil {
				m.DenomToMap = make(map[string]*Bank_BalanceMapPerDenom)
			}
			var mapkey string
			var mapvalue *Bank_BalanceMapPerDenom
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBank
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBank
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Bank_BalanceMapPerDenom{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DenomToMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank_IbcDenomMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcDenomMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcDenomMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenomToDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcDenomToDenom == nil {
				m.IbcDenomToDenom = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBank
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBank
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IbcDenomToDenom[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBank = fmt.Errorf("proto: unexpected end of group")
)
