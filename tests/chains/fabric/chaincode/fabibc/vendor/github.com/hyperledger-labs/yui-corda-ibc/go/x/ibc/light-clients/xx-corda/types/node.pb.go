// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/node.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PartyFromNameRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExactMatch bool   `protobuf:"varint,2,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
}

func (m *PartyFromNameRequest) Reset()         { *m = PartyFromNameRequest{} }
func (m *PartyFromNameRequest) String() string { return proto.CompactTextString(m) }
func (*PartyFromNameRequest) ProtoMessage()    {}
func (*PartyFromNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6adb37924f84045c, []int{0}
}
func (m *PartyFromNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartyFromNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartyFromNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartyFromNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyFromNameRequest.Merge(m, src)
}
func (m *PartyFromNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *PartyFromNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyFromNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartyFromNameRequest proto.InternalMessageInfo

func (m *PartyFromNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PartyFromNameRequest) GetExactMatch() bool {
	if m != nil {
		return m.ExactMatch
	}
	return false
}

type PartyFromNameResponse struct {
	Party *Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (m *PartyFromNameResponse) Reset()         { *m = PartyFromNameResponse{} }
func (m *PartyFromNameResponse) String() string { return proto.CompactTextString(m) }
func (*PartyFromNameResponse) ProtoMessage()    {}
func (*PartyFromNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6adb37924f84045c, []int{1}
}
func (m *PartyFromNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartyFromNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartyFromNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartyFromNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyFromNameResponse.Merge(m, src)
}
func (m *PartyFromNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *PartyFromNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyFromNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartyFromNameResponse proto.InternalMessageInfo

func (m *PartyFromNameResponse) GetParty() *Party {
	if m != nil {
		return m.Party
	}
	return nil
}

type AddressFromNameRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExactMatch bool   `protobuf:"varint,2,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
}

func (m *AddressFromNameRequest) Reset()         { *m = AddressFromNameRequest{} }
func (m *AddressFromNameRequest) String() string { return proto.CompactTextString(m) }
func (*AddressFromNameRequest) ProtoMessage()    {}
func (*AddressFromNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6adb37924f84045c, []int{2}
}
func (m *AddressFromNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressFromNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressFromNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressFromNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressFromNameRequest.Merge(m, src)
}
func (m *AddressFromNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddressFromNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressFromNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddressFromNameRequest proto.InternalMessageInfo

func (m *AddressFromNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddressFromNameRequest) GetExactMatch() bool {
	if m != nil {
		return m.ExactMatch
	}
	return false
}

type AddressFromNameResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AddressFromNameResponse) Reset()         { *m = AddressFromNameResponse{} }
func (m *AddressFromNameResponse) String() string { return proto.CompactTextString(m) }
func (*AddressFromNameResponse) ProtoMessage()    {}
func (*AddressFromNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6adb37924f84045c, []int{3}
}
func (m *AddressFromNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressFromNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressFromNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressFromNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressFromNameResponse.Merge(m, src)
}
func (m *AddressFromNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddressFromNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressFromNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddressFromNameResponse proto.InternalMessageInfo

func (m *AddressFromNameResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*PartyFromNameRequest)(nil), "ibc.lightclients.corda.v1.PartyFromNameRequest")
	proto.RegisterType((*PartyFromNameResponse)(nil), "ibc.lightclients.corda.v1.PartyFromNameResponse")
	proto.RegisterType((*AddressFromNameRequest)(nil), "ibc.lightclients.corda.v1.AddressFromNameRequest")
	proto.RegisterType((*AddressFromNameResponse)(nil), "ibc.lightclients.corda.v1.AddressFromNameResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/node.proto", fileDescriptor_6adb37924f84045c)
}

var fileDescriptor_6adb37924f84045c = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x9b, 0xcb, 0xbd, 0x57, 0x9d, 0x22, 0xc2, 0xe0, 0x9f, 0xda, 0x45, 0x2c, 0xc5, 0x45,
	0x41, 0x92, 0xb1, 0x2d, 0xb8, 0xd7, 0x85, 0x1b, 0x69, 0x2b, 0x71, 0xe7, 0x46, 0x26, 0x93, 0x43,
	0x32, 0x90, 0x64, 0xe2, 0xcc, 0xb4, 0x24, 0x6f, 0xe1, 0x63, 0xb9, 0xec, 0xd2, 0xa5, 0xb4, 0x8f,
	0xe1, 0x46, 0x3a, 0x69, 0x45, 0xab, 0xf5, 0x0f, 0xb8, 0x3b, 0x39, 0xe7, 0x3b, 0xbf, 0x7c, 0x67,
	0xf8, 0xd0, 0x21, 0xf7, 0x19, 0x89, 0x79, 0x18, 0x69, 0x16, 0x73, 0x48, 0xb5, 0x22, 0x4c, 0xc8,
	0x80, 0x92, 0x51, 0x9b, 0xa4, 0x22, 0x00, 0x37, 0x93, 0x42, 0x0b, 0xbc, 0xcf, 0x7d, 0xe6, 0xbe,
	0x56, 0xb9, 0x46, 0xe5, 0x8e, 0xda, 0xf5, 0xa3, 0xd5, 0x00, 0x53, 0x38, 0xba, 0xc8, 0x40, 0x95,
	0x9c, 0xe6, 0x05, 0xda, 0xbe, 0xa4, 0x52, 0x17, 0xe7, 0x52, 0x24, 0x7d, 0x9a, 0x80, 0x07, 0xb7,
	0x43, 0x50, 0x1a, 0x63, 0xf4, 0x37, 0xa5, 0x09, 0xd4, 0xac, 0x86, 0xd5, 0xda, 0xf0, 0x4c, 0x8d,
	0x0f, 0x50, 0x15, 0x72, 0xca, 0xf4, 0x4d, 0x42, 0x35, 0x8b, 0x6a, 0x7f, 0x1a, 0x56, 0x6b, 0xdd,
	0x43, 0xa6, 0xd5, 0x9b, 0x75, 0x9a, 0x03, 0xb4, 0xb3, 0x04, 0x53, 0x99, 0x48, 0x15, 0xe0, 0x13,
	0xf4, 0x2f, 0x9b, 0x0d, 0x0c, 0xae, 0xda, 0x69, 0xb8, 0x2b, 0xdd, 0xbb, 0x06, 0xe0, 0x95, 0xf2,
	0x66, 0x0f, 0xed, 0x9e, 0x06, 0x81, 0x04, 0xa5, 0x7e, 0xc5, 0x5f, 0x17, 0xed, 0xbd, 0xc3, 0xcd,
	0x1d, 0xd6, 0xd0, 0x1a, 0x2d, 0x47, 0x73, 0xe4, 0xe2, 0xb3, 0xf3, 0x64, 0xa1, 0x6a, 0x5f, 0x04,
	0x70, 0x05, 0x72, 0xc4, 0x19, 0x60, 0x89, 0x36, 0xdf, 0x1c, 0x89, 0xc9, 0x57, 0xd7, 0x2c, 0x79,
	0xaf, 0x1f, 0x7f, 0x7f, 0x61, 0xee, 0x2e, 0x47, 0x5b, 0x4b, 0xc6, 0x71, 0xfb, 0x13, 0xc8, 0xc7,
	0x6f, 0x56, 0xef, 0xfc, 0x64, 0xa5, 0xfc, 0xf3, 0x19, 0xbf, 0x9f, 0xd8, 0xd6, 0x78, 0x62, 0x5b,
	0x8f, 0x13, 0xdb, 0xba, 0x9b, 0xda, 0x95, 0xf1, 0xd4, 0xae, 0x3c, 0x4c, 0xed, 0xca, 0xf5, 0x20,
	0xe4, 0x3a, 0x1a, 0xfa, 0x2e, 0x13, 0x09, 0x89, 0x8a, 0x0c, 0x64, 0x0c, 0x41, 0x08, 0xd2, 0x89,
	0xa9, 0xaf, 0x48, 0x31, 0xe4, 0x4e, 0x19, 0xb6, 0x59, 0x18, 0x43, 0x41, 0x72, 0xf2, 0x92, 0x4a,
	0x67, 0x11, 0xcb, 0x3c, 0x2f, 0x35, 0xc4, 0x04, 0xd2, 0xff, 0x6f, 0x12, 0xd9, 0x7d, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xb9, 0x9d, 0x7e, 0x69, 0x01, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	PartyFromName(ctx context.Context, in *PartyFromNameRequest, opts ...grpc.CallOption) (*PartyFromNameResponse, error)
	AddressFromName(ctx context.Context, in *AddressFromNameRequest, opts ...grpc.CallOption) (*AddressFromNameResponse, error)
}

type nodeServiceClient struct {
	cc grpc1.ClientConn
}

func NewNodeServiceClient(cc grpc1.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) PartyFromName(ctx context.Context, in *PartyFromNameRequest, opts ...grpc.CallOption) (*PartyFromNameResponse, error) {
	out := new(PartyFromNameResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.NodeService/PartyFromName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) AddressFromName(ctx context.Context, in *AddressFromNameRequest, opts ...grpc.CallOption) (*AddressFromNameResponse, error) {
	out := new(AddressFromNameResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.NodeService/AddressFromName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	PartyFromName(context.Context, *PartyFromNameRequest) (*PartyFromNameResponse, error)
	AddressFromName(context.Context, *AddressFromNameRequest) (*AddressFromNameResponse, error)
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) PartyFromName(ctx context.Context, req *PartyFromNameRequest) (*PartyFromNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyFromName not implemented")
}
func (*UnimplementedNodeServiceServer) AddressFromName(ctx context.Context, req *AddressFromNameRequest) (*AddressFromNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressFromName not implemented")
}

func RegisterNodeServiceServer(s grpc1.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_PartyFromName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyFromNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).PartyFromName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.NodeService/PartyFromName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).PartyFromName(ctx, req.(*PartyFromNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_AddressFromName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressFromNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).AddressFromName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.NodeService/AddressFromName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).AddressFromName(ctx, req.(*AddressFromNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PartyFromName",
			Handler:    _NodeService_PartyFromName_Handler,
		},
		{
			MethodName: "AddressFromName",
			Handler:    _NodeService_AddressFromName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/node.proto",
}

func (m *PartyFromNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartyFromNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartyFromNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExactMatch {
		i--
		if m.ExactMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartyFromNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartyFromNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartyFromNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Party != nil {
		{
			size, err := m.Party.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressFromNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressFromNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressFromNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExactMatch {
		i--
		if m.ExactMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressFromNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressFromNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressFromNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartyFromNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.ExactMatch {
		n += 2
	}
	return n
}

func (m *PartyFromNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Party != nil {
		l = m.Party.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *AddressFromNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.ExactMatch {
		n += 2
	}
	return n
}

func (m *AddressFromNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartyFromNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartyFromNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartyFromNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExactMatch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartyFromNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartyFromNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartyFromNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Party", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Party == nil {
				m.Party = &Party{}
			}
			if err := m.Party.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressFromNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressFromNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressFromNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExactMatch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressFromNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressFromNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressFromNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
